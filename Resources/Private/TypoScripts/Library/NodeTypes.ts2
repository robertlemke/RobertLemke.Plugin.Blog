#
# Add a new matcher to the rendering of the main content (PrimaryContent) to check if the current node
# is a blog post document. In this case we don't render a ContentCollection like the default matcher
# but render the blog post TypoScript object.
#
prototype(TYPO3.Neos:PrimaryContent).blogPost {
	condition = ${q(documentNode).is('[instanceof RobertLemke.Plugin.Blog:Post]')}
	type = 'RobertLemke.Plugin.Blog:Post'
}

#
# Blog Post is rendered by a Template-based TypoScript object which contains some
# properties on its own (title, ...) and renders sub nodes contained in two
# separate sections, namely "main" for the actual post content and "comments" for
# the comment nodes.
#
# The blog post content is made of several content elements which are rendered
# as a collection just like a page would render its content elements. Hence the
# usage of ContentCollection.Default.
#
# The blog post comments are just several Text nodes which are as well rendered
# through the TypoScript collection feature.
#
prototype(RobertLemke.Plugin.Blog:Post) < prototype(TYPO3.Neos:Template) {
	templatePath = 'resource://RobertLemke.Plugin.Blog/Private/Templates/TypoScript/Post.html'
	title = ${q(node).property('title')}

		# Render the main ContentCollection of the Post like a page would
	main = TYPO3.Neos:ContentCollection {
		nodePath = 'main'
	}

		# Render an additional ContentCollection for comments
	comments = TYPO3.Neos:ContentCollection {
		nodePath = 'comments'

			# Filter out any spam with a processor
		collection.@process.spamFilter = ${value.filter('[spam = false]')}
	}

	numberOfComments = ${q(node).children('comments').children('[spam = false]').count()}
}

#
# Blog Comment is rendered by a vanilla Template-based TypoScript object
#
prototype(RobertLemke.Plugin.Blog:Comment) < prototype(TYPO3.Neos:Template) {
	templatePath = 'resource://RobertLemke.Plugin.Blog/Private/Templates/TypoScript/Comment.html'
	text = ${q(node).property('text')}
}

#
# The PostPlugin provides a few methods to display lists of blog posts. Its
# TypoScript object is a regular Plugin content type.
#
prototype(RobertLemke.Plugin.Blog:PostPlugin) < prototype(TYPO3.Neos:Plugin) {
	package = 'RobertLemke.Plugin.Blog'
	controller = 'Post'
	action = 'index'
}

#
# Quote is a straight-forward content type
#
prototype(RobertLemke.Plugin.Blog:Quote) < prototype(TYPO3.Neos:Template) {
	templatePath = 'resource://RobertLemke.Plugin.Blog/Private/Templates/TypoScript/Quote.html'
	citeAuthor = ${q(node).property('citeAuthor')}
	citeAuthorUri = ${q(node).property('citeAuthorUri')}
	citeUriLabel = ${q(node).property('citeUriLabel')}
	citeUri = ${q(node).property('citeUri')}
	text = ${q(node).property('text')}
}
